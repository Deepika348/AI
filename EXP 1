import heapq

# Goal state
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]   # 0 represents the blank tile

# Moves: up, down, left, right
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]


# Function to flatten state for hashing
def state_to_tuple(state):
    return tuple(num for row in state for num in row)


# Manhattan distance heuristic
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                target_x = (value - 1) // 3
                target_y = (value - 1) % 3
                distance += abs(i - target_x) + abs(j - target_y)
    return distance


# Find blank tile position
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j


# Generate possible states
def get_neighbors(state):
    neighbors = []
    x, y = find_blank(state)

    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]  # copy state
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors


# A* Search
def solve_puzzle(start_state):
    pq = []
    heapq.heappush(pq, (manhattan_distance(start_state), 0, start_state, []))
    visited = set()

    while pq:
        est_cost, cost, state, path = heapq.heappop(pq)

        if state == goal_state:
            return path + [state]

        state_tuple = state_to_tuple(state)
        if state_tuple in visited:
            continue
        visited.add(state_tuple)

        for neighbor in get_neighbors(state):
            if state_to_tuple(neighbor) not in visited:
                heapq.heappush(pq, (
                    cost + 1 + manhattan_distance(neighbor),
                    cost + 1,
                    neighbor,
                    path + [state]
                ))
    return None


# Print state in a nice format
def print_state(state):
    for row in state:
        print(" ".join(str(num) if num != 0 else " " for num in row))
    print("-" * 6)


# Example usage
if __name__ == "__main__":
    # Example start state (can change)
    start_state = [[1, 2, 3],
                   [4, 0, 6],
                   [7, 5, 8]]

    solution = solve_puzzle(start_state)

    if solution:
        print("Solution found in", len(solution) - 1, "moves:\n")
        for step in solution:
            print_state(step)
    else:
        print("No solution exists!")

OUTPUT:
Solution found in 2 moves:

1 2 3
4   6
7 5 8
------
1 2 3
4 5 6
7   8
------
1 2 3
4 5 6
7 8  


